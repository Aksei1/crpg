# Redirect HTTP to HTTPS
server {
    listen 80;
    return 301 https://$host$request_uri;
}

# Redirect www to non-wwww
server {
    listen 80;
    listen 443 ssl http2;
    server_name www.{{ crpg_domain_name }};

    include /etc/nginx/snippets/crpg-ssl.conf;

    return 301 https://{{ crpg_domain_name }}$request_uri;
}

# Web UI
server {
    listen 443 ssl http2;
    server_name {{ crpg_domain_name }};
    root {{ crpg_ui_path }};

    include /etc/nginx/snippets/crpg-ssl.conf;

    # If the browser can render compressed files, give it the pre-compressed version.
    gzip_static on;

    location /index.html {
        # Because the filename of /index.html never change, we need to use ETag
        # to leverage browser-side caching
        etag on;
    }

    location ~ \.(ico|png|jpg) {
        # Assets don't contain fingerprints (hashes) and should be cached
        # for a limited period of time.
        etag on;
        add_header Cache-Control max-age=86400; # 1 day
    }

    location / {
        # Because the static files other than /index.html and assets contain
        # fingerprints (hashes) in their filenames and they serve as the cache
        # buster, we don't need ETag any more. Just let browsers cache those
        # responses forever (or 5 years, maybe).
        etag off;
        add_header Cache-Control max-age=315360000,immutable;

        # Page routing is done client-side, so if the file doesn't exist
        # serve index.html which will handle the routing.
        try_files $uri /index.html;
      }
}

# Web API
server {
    listen 443 ssl http2;
    server_name api.{{ crpg_domain_name }};

    include /etc/nginx/snippets/crpg-ssl.conf;

    location / {
        proxy_pass         http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }
}
